package sse

import (
	"mcp-devops/server/k8s"
	"mcp-devops/server/linux"
	"mcp-devops/server/redis"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

func K8sServer() (*server.MCPServer, error) {
	svr := server.NewMCPServer("Kubernetes MCP Server", mcp.LATEST_PROTOCOL_VERSION)
	// 添加tool， tool 三大要素，名称，描述，参数，参数中也要有描述
	// 添加kubernetes pod相关工具
	svr.AddTool(mcp.NewTool("list_pods",
		mcp.WithDescription("列出指定命名空间中的所有Pod"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListPodsTool)
	svr.AddTool(mcp.NewTool("describe_pod",
		mcp.WithDescription("查看pod的详细信息"),
		mcp.WithString("pod_name",
			mcp.Required(),
			mcp.Description("要查看的pod名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Pod所在的名称空间，默认为default"),
			mcp.Required(),
			mcp.DefaultString("default"),
		),
	), k8s.DsscribePodTool)

	svr.AddTool(mcp.NewTool("delete_pod",
		mcp.WithDescription("删除指定的Pod"),
		mcp.WithString("pod_name",
			mcp.Required(),
			mcp.Description("要删除的Pod名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Pod所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithBoolean("force",
			mcp.Description("是否强制删除"),
			mcp.DefaultBool(false),
		),
	), k8s.DeletePodTool)

	svr.AddTool(mcp.NewTool("pod_logs",
		mcp.WithDescription("获取Pod的日志"),
		mcp.WithString("pod_name",
			mcp.Required(),
			mcp.Description("要查看日志的Pod名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Pod所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithString("container",
			mcp.Description("要查看日志的容器名称, 如果Pod中只有一个容器则可以省略"),
		),
		mcp.WithNumber("tail",
			mcp.Description("要查看的日志行数"),
			mcp.DefaultNumber(100.0),
		),
	), k8s.PodLogsTool)

	// 添加Kubernetes Deployment相关工具
	svr.AddTool(mcp.NewTool("list_deployments",
		mcp.WithDescription("列出指定命名空间中的所有Deployment"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListDeploymentsTool)

	svr.AddTool(mcp.NewTool("describe_deployment",
		mcp.WithDescription("查看Deployment的详细信息"),
		mcp.WithString("deployment_name",
			mcp.Required(),
			mcp.Description("要查看的Deployment名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Deployment所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DescribeDeploymentTool)

	svr.AddTool(mcp.NewTool("scale_deployment",
		mcp.WithDescription("调整Deployment的副本数"),
		mcp.WithString("deployment_name",
			mcp.Required(),
			mcp.Description("要调整的Deployment名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Deployment所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithNumber("replicas",
			mcp.Required(),
			mcp.Description("要设置的副本数"),
		),
	), k8s.ScaleDeploymentTool)

	svr.AddTool(mcp.NewTool("restart_deployment",
		mcp.WithDescription("重启Deployment的所有Pod"),
		mcp.WithString("deployment_name",
			mcp.Required(),
			mcp.Description("要重启的Deployment名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Deployment所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.RestartDeploymentTool)

	// 添加Kubernetes DaemonSet相关工具
	svr.AddTool(mcp.NewTool("list_daemonsets",
		mcp.WithDescription("列出指定命名空间中的所有DaemonSets"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListDaemonSetsTool)

	svr.AddTool(mcp.NewTool("describe_daemonset",
		mcp.WithDescription("查看DaemonSet的详细信息"),
		mcp.WithString("daemonset_name",
			mcp.Required(),
			mcp.Description("要查看的StatefulSet名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("DaemonSet所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DescribeDaemonSetTool)

	svr.AddTool(mcp.NewTool("restart_daemonset",
		mcp.WithDescription("重启DaemonSet的所有Pod"),
		mcp.WithString("daemonset_name",
			mcp.Required(),
			mcp.Description("要重启的DaemonSet名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("DaemonSet所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.RestartDaemonSetTool)

	// 添加Kubernetes StatefulSet相关工具
	svr.AddTool(mcp.NewTool("list_statefulsets",
		mcp.WithDescription("列出指定命名空间中的所有StatefulSet"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListStatefulSetsTool)

	svr.AddTool(mcp.NewTool("describe_statefulset",
		mcp.WithDescription("查看StatefulSet的详细信息"),
		mcp.WithString("statefulset_name", // Use statefulset_name
			mcp.Required(),
			mcp.Description("要查看的StatefulSet名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("StatefulSet所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DescribeStatefulSetTool)

	svr.AddTool(mcp.NewTool("scale_statefulset",
		mcp.WithDescription("调整StatefulSet的副本数"),
		mcp.WithString("statefulset_name",
			mcp.Required(),
			mcp.Description("要调整的StatefulSet名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("StatefulSet所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithNumber("replicas",
			mcp.Required(),
			mcp.Description("要设置的副本数"),
		),
	), k8s.ScaleStatefulSetTool)

	svr.AddTool(mcp.NewTool("restart_statefulset",
		mcp.WithDescription("重启StatefulSet的所有Pod"),
		mcp.WithString("statefulset_name",
			mcp.Required(),
			mcp.Description("要重启的StatefulSet名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("StatefulSet所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.RestartStatefulSetTool)

	// 添加Kubernetes Service相关工具
	svr.AddTool(mcp.NewTool("list_services",
		mcp.WithDescription("列出指定命名空间中的所有Service"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListServicesTool)

	svr.AddTool(mcp.NewTool("describe_service",
		mcp.WithDescription("查看Service的详细信息"),
		mcp.WithString("service_name",
			mcp.Required(),
			mcp.Description("要查看的Service名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Service所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DescribeServiceTool)

	svr.AddTool(mcp.NewTool("modify_service_type",
		mcp.WithDescription("调整Service Type"),
		mcp.WithString("service_name",
			mcp.Required(),
			mcp.Description("要调整的Service名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Service所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithString("service_type",
			mcp.Required(),
			mcp.Description("Service类型"),
			mcp.DefaultString("ClusterIP"),
		),
	), k8s.ModifyServiceTypeTool)

	// 添加Kubernetes Namespace相关工具
	svr.AddTool(mcp.NewTool("list_namespaces",
		mcp.WithDescription("列出所有命名空间"),
	), k8s.ListNamespacesTool)

	svr.AddTool(mcp.NewTool("describe_namespace",
		mcp.WithDescription("查看命名空间的详细信息"),
		mcp.WithString("namespace_name",
			mcp.Required(),
			mcp.Description("要查看的命名空间名称"),
		),
	), k8s.DescribeNamespaceTool)

	svr.AddTool(mcp.NewTool("create_namespace",
		mcp.WithDescription("创建新的命名空间"),
		mcp.WithString("namespace_name",
			mcp.Required(),
			mcp.Description("要创建的命名空间名称"),
		),
	), k8s.CreateNamespaceTool)

	svr.AddTool(mcp.NewTool("delete_namespace",
		mcp.WithDescription("删除指定的命名空间"),
		mcp.WithString("namespace_name",
			mcp.Required(),
			mcp.Description("要删除的命名空间名称"),
		),
	), k8s.DeleteNamespaceTool)

	// 添加Kubernetes Ingress相关工具
	svr.AddTool(mcp.NewTool("list_ingresses",
		mcp.WithDescription("列出指定命名空间中的所有Ingress"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListIngressesTool)

	svr.AddTool(mcp.NewTool("describe_ingress",
		mcp.WithDescription("查看Ingress的详细信息"),
		mcp.WithString("ingress_name",
			mcp.Required(),
			mcp.Description("要查看的Ingress名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Ingress所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DescribeIngressTool)

	svr.AddTool(mcp.NewTool("create_ingress",
		mcp.WithDescription("创建新的Ingress"),
		mcp.WithString("ingress_name",
			mcp.Required(),
			mcp.Description("要创建的Ingress名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Ingress所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithString("host",
			mcp.Description("主机名, 例如: example.com"),
		),
		mcp.WithString("service_name",
			mcp.Required(),
			mcp.Description("后端服务名称"),
		),
		mcp.WithNumber("service_port",
			mcp.Description("后端服务端口, 默认为80"),
			mcp.DefaultNumber(80),
		),
		mcp.WithString("path",
			mcp.Description("路径, 默认为/"),
			mcp.DefaultString("/"),
		),
		mcp.WithString("path_type",
			mcp.Description("路径类型: Exact, Prefix, 或 ImplementationSpecific, 默认为Prefix"),
			mcp.DefaultString("Prefix"),
		),
		mcp.WithString("ingress_class_name",
			mcp.Description("Ingress类名称, 例如: nginx, traefik"),
		),
		mcp.WithBoolean("tls_enabled",
			mcp.Description("是否启用TLS"),
			mcp.DefaultBool(false),
		),
		mcp.WithString("tls_secret_name",
			mcp.Description("TLS证书Secret名称, 如不提供则使用<ingress-name>-tls"),
		),
	), k8s.CreateIngressTool)

	svr.AddTool(mcp.NewTool("update_ingress",
		mcp.WithDescription("更新现有的Ingress"),
		mcp.WithString("ingress_name",
			mcp.Required(),
			mcp.Description("要更新的Ingress名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Ingress所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithString("host",
			mcp.Description("主机名, 例如: example.com"),
		),
		mcp.WithString("service_name",
			mcp.Description("后端服务名称"),
		),
		mcp.WithNumber("service_port",
			mcp.Description("后端服务端口"),
		),
		mcp.WithString("path",
			mcp.Description("路径"),
		),
		mcp.WithString("path_type",
			mcp.Description("路径类型: Exact, Prefix, 或 ImplementationSpecific"),
		),
		mcp.WithString("ingress_class_name",
			mcp.Description("Ingress类名称, 例如: nginx, traefik"),
		),
		mcp.WithBoolean("tls_enabled",
			mcp.Description("是否启用TLS"),
		),
		mcp.WithString("tls_secret_name",
			mcp.Description("TLS证书Secret名称"),
		),
	), k8s.UpdateIngressTool)

	svr.AddTool(mcp.NewTool("delete_ingress",
		mcp.WithDescription("删除指定的Ingress"),
		mcp.WithString("ingress_name",
			mcp.Required(),
			mcp.Description("要删除的Ingress名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Ingress所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DeleteIngressTool)

	// 添加Kubernetes ConfigMap相关工具
	svr.AddTool(mcp.NewTool("list_configmaps",
		mcp.WithDescription("列出指定命名空间中的所有ConfigMap"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListConfigMapsTool)

	svr.AddTool(mcp.NewTool("describe_configmap",
		mcp.WithDescription("查看ConfigMap的详细信息"),
		mcp.WithString("configmap_name",
			mcp.Required(),
			mcp.Description("要查看的ConfigMap名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("ConfigMap所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DescribeConfigMapTool)

	svr.AddTool(mcp.NewTool("create_configmap",
		mcp.WithDescription("创建新的ConfigMap"),
		mcp.WithString("configmap_name",
			mcp.Required(),
			mcp.Description("要创建的ConfigMap名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("ConfigMap所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithObject("data",
			mcp.Description("ConfigMap数据，键值对格式"),
		),
		mcp.WithObject("labels",
			mcp.Description("ConfigMap标签，键值对格式"),
		),
		mcp.WithObject("annotations",
			mcp.Description("ConfigMap注释，键值对格式"),
		),
		mcp.WithString("from_file",
			mcp.Description("从文件创建ConfigMap，格式为key=文件路径"),
		),
		mcp.WithString("from_literal",
			mcp.Description("从字面值创建ConfigMap，格式为key=value"),
		),
	), k8s.CreateConfigMapTool)

	svr.AddTool(mcp.NewTool("update_configmap",
		mcp.WithDescription("更新现有的ConfigMap"),
		mcp.WithString("configmap_name",
			mcp.Required(),
			mcp.Description("要更新的ConfigMap名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("ConfigMap所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithObject("data",
			mcp.Description("ConfigMap数据，键值对格式"),
		),
		mcp.WithObject("labels",
			mcp.Description("ConfigMap标签，键值对格式"),
		),
		mcp.WithObject("annotations",
			mcp.Description("ConfigMap注释，键值对格式"),
		),
		mcp.WithString("key",
			mcp.Description("要添加或更新的键"),
		),
		mcp.WithString("value",
			mcp.Description("键对应的值"),
		),
	), k8s.UpdateConfigMapTool)

	svr.AddTool(mcp.NewTool("delete_configmap",
		mcp.WithDescription("删除指定的ConfigMap"),
		mcp.WithString("configmap_name",
			mcp.Required(),
			mcp.Description("要删除的ConfigMap名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("ConfigMap所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DeleteConfigMapTool)

	// 添加Kubernetes Secret相关工具
	svr.AddTool(mcp.NewTool("list_secrets",
		mcp.WithDescription("列出指定命名空间中的所有Secret"),
		mcp.WithString("namespace",
			mcp.Description("要查询的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.ListSecretsTool)

	svr.AddTool(mcp.NewTool("describe_secret",
		mcp.WithDescription("查看Secret的详细信息"),
		mcp.WithString("secret_name",
			mcp.Required(),
			mcp.Description("要查看的Secret名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Secret所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithBoolean("show_data",
			mcp.Description("是否显示敏感数据"),
			mcp.DefaultBool(false),
		),
	), k8s.DescribeSecretTool)

	svr.AddTool(mcp.NewTool("create_secret",
		mcp.WithDescription("创建新的Secret"),
		mcp.WithString("secret_name",
			mcp.Required(),
			mcp.Description("要创建的Secret名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Secret所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithString("type",
			mcp.Description("Secret类型，如Opaque、kubernetes.io/tls等"),
			mcp.DefaultString("Opaque"),
		),
		mcp.WithObject("data",
			mcp.Description("Secret数据，键值对格式，值将被转换为二进制"),
		),
		mcp.WithObject("string_data",
			mcp.Description("Secret字符串数据，键值对格式"),
		),
		mcp.WithObject("labels",
			mcp.Description("Secret标签，键值对格式"),
		),
		mcp.WithObject("annotations",
			mcp.Description("Secret注释，键值对格式"),
		),
		mcp.WithString("from_file",
			mcp.Description("从文件创建Secret，格式为key=文件路径"),
		),
		mcp.WithString("from_literal",
			mcp.Description("从字面值创建Secret，格式为key=value"),
		),
	), k8s.CreateSecretTool)

	svr.AddTool(mcp.NewTool("update_secret",
		mcp.WithDescription("更新现有的Secret"),
		mcp.WithString("secret_name",
			mcp.Required(),
			mcp.Description("要更新的Secret名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Secret所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
		mcp.WithObject("data",
			mcp.Description("Secret数据，键值对格式，值将被转换为二进制"),
		),
		mcp.WithObject("string_data",
			mcp.Description("Secret字符串数据，键值对格式"),
		),
		mcp.WithObject("labels",
			mcp.Description("Secret标签，键值对格式"),
		),
		mcp.WithObject("annotations",
			mcp.Description("Secret注释，键值对格式"),
		),
		mcp.WithString("key",
			mcp.Description("要添加或更新的键"),
		),
		mcp.WithString("value",
			mcp.Description("键对应的值"),
		),
	), k8s.UpdateSecretTool)

	svr.AddTool(mcp.NewTool("delete_secret",
		mcp.WithDescription("删除指定的Secret"),
		mcp.WithString("secret_name",
			mcp.Required(),
			mcp.Description("要删除的Secret名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Secret所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DeleteSecretTool)

	// 添加Kubernetes故障诊断工具
	svr.AddTool(mcp.NewTool("cluster_health",
		mcp.WithDescription("获取集群健康状态概览"),
	), k8s.ClusterHealthTool)

	svr.AddTool(mcp.NewTool("pod_diagnostic",
		mcp.WithDescription("诊断Pod问题"),
		mcp.WithString("pod_name",
			mcp.Required(),
			mcp.Description("要诊断的Pod名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Pod所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.PodDiagnosticTool)

	svr.AddTool(mcp.NewTool("node_diagnostic",
		mcp.WithDescription("诊断节点问题"),
		mcp.WithString("node_name",
			mcp.Required(),
			mcp.Description("要诊断的节点名称"),
		),
	), k8s.NodeDiagnosticTool)

	svr.AddTool(mcp.NewTool("deployment_diagnostic",
		mcp.WithDescription("诊断Deployment问题"),
		mcp.WithString("deployment_name",
			mcp.Required(),
			mcp.Description("要诊断的Deployment名称"),
		),
		mcp.WithString("namespace",
			mcp.Description("Deployment所在的命名空间, 默认为default"),
			mcp.DefaultString("default"),
		),
	), k8s.DeploymentDiagnosticTool)

	svr.AddTool(mcp.NewTool("alert_analysis",
		mcp.WithDescription("分析告警信息"),
		mcp.WithString("alert_name",
			mcp.Description("告警名称"),
		),
		mcp.WithString("severity",
			mcp.Description("告警严重性"),
		),
		mcp.WithString("status",
			mcp.Description("告警状态"),
		),
		mcp.WithString("description",
			mcp.Description("告警描述"),
		),
		mcp.WithString("namespace",
			mcp.Description("相关命名空间"),
		),
		mcp.WithString("pod_name",
			mcp.Description("相关Pod名称"),
		),
		mcp.WithString("node_name",
			mcp.Description("相关节点名称"),
		),
	), k8s.AlertAnalysisTool)

	// 添加Linux系统工具
	svr.AddTool(mcp.NewTool("system_info",
		mcp.WithDescription("获取系统信息"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
	), linux.SystemInfoTool)

	svr.AddTool(mcp.NewTool("process_info",
		mcp.WithDescription("获取进程信息"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("process_name",
			mcp.Description("要查询的进程名称，如不提供则显示CPU使用率最高的进程"),
		),
		mcp.WithNumber("top_count",
			mcp.Description("显示的进程数量，默认为10"),
			mcp.DefaultNumber(10),
		),
	), linux.ProcessInfoTool)

	svr.AddTool(mcp.NewTool("resource_usage",
		mcp.WithDescription("获取资源使用情况"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithNumber("duration",
			mcp.Description("监控持续时间（秒），默认为5秒"),
			mcp.DefaultNumber(5),
		),
	), linux.ResourceUsageTool)

	svr.AddTool(mcp.NewTool("network_info",
		mcp.WithDescription("获取网络信息"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("interface",
			mcp.Description("要查询的网络接口名称，如不提供则显示所有接口"),
		),
	), linux.NetworkInfoTool)

	svr.AddTool(mcp.NewTool("log_analysis",
		mcp.WithDescription("分析日志文件"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("log_path",
			mcp.Description("日志文件路径，默认为/var/log/syslog"),
			mcp.DefaultString("/var/log/syslog"),
		),
		mcp.WithString("pattern",
			mcp.Description("要搜索的模式，如不提供则显示最后几行日志"),
		),
		mcp.WithNumber("lines",
			mcp.Description("显示的行数，默认为50"),
			mcp.DefaultNumber(50),
		),
	), linux.LogAnalysisTool)

	svr.AddTool(mcp.NewTool("service_status",
		mcp.WithDescription("获取服务状态"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("service_name",
			mcp.Description("要查询的服务名称，如不提供则显示所有运行中的服务"),
		),
	), linux.ServiceStatusTool)

	// 添加Kubernetes特定的Linux工具
	svr.AddTool(mcp.NewTool("kubelet_status",
		mcp.WithDescription("获取kubelet状态"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
	), linux.KubeletStatusTool)

	svr.AddTool(mcp.NewTool("container_runtime_status",
		mcp.WithDescription("获取容器运行时状态"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("runtime",
			mcp.Description("容器运行时类型，如docker、containerd、cri-o等，默认为docker"),
			mcp.DefaultString("docker"),
		),
	), linux.ContainerRuntimeStatusTool)

	svr.AddTool(mcp.NewTool("kube_proxy_status",
		mcp.WithDescription("获取kube-proxy状态"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
	), linux.KubeProxyStatusTool)

	svr.AddTool(mcp.NewTool("node_network_debug",
		mcp.WithDescription("节点网络调试"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("target",
			mcp.Description("目标主机名或IP地址，如不提供则显示网络配置"),
		),
		mcp.WithNumber("port",
			mcp.Description("目标端口，默认为80"),
			mcp.DefaultNumber(80),
		),
	), linux.NodeNetworkDebugTool)

	svr.AddTool(mcp.NewTool("cni_status",
		mcp.WithDescription("获取CNI状态"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("cni_type",
			mcp.Description("CNI类型，如calico、flannel、weave、cilium等"),
		),
	), linux.CNIStatusTool)

	svr.AddTool(mcp.NewTool("kube_component_logs",
		mcp.WithDescription("获取Kubernetes组件日志"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("component",
			mcp.Description("组件名称，如kubelet、kube-proxy等，默认为kubelet"),
			mcp.DefaultString("kubelet"),
		),
		mcp.WithNumber("lines",
			mcp.Description("显示的行数，默认为50"),
			mcp.DefaultNumber(50),
		),
	), linux.KubeComponentLogsTool)

	svr.AddTool(mcp.NewTool("container_inspect",
		mcp.WithDescription("检查容器详情"),
		mcp.WithString("hostname",
			mcp.Description("要查询的主机名，如不提供则查询本地系统"),
		),
		mcp.WithString("container_id",
			mcp.Required(),
			mcp.Description("容器ID或名称"),
		),
		mcp.WithString("runtime",
			mcp.Description("容器运行时类型，如docker、containerd、cri-o等，默认为docker"),
			mcp.DefaultString("docker"),
		),
	), linux.ContainerInspectTool)

	// 添加企业微信消息发送工具
	svr.AddTool(mcp.NewTool("send_wechat_message",
		mcp.WithDescription("发送企业微信消息通知"),
		mcp.WithString("content",
			mcp.Required(),
			mcp.Description("消息内容"),
		),
		mcp.WithString("msg_type",
			mcp.Description("消息类型：text(文本), markdown, template_card(卡片消息)"),
			mcp.DefaultString("text"),
		),
		mcp.WithString("title",
			mcp.Description("消息标题，用于markdown和template_card类型"),
		),
		mcp.WithString("webhook_url",
			mcp.Description("企业微信机器人Webhook地址，如不提供则使用WECHAT_WEBHOOK_URL环境变量"),
		),
		mcp.WithString("card_type",
			mcp.Description("卡片类型，用于template_card类型消息，默认为text_notice"),
			mcp.DefaultString("text_notice"),
		),
	), k8s.SendWeChatMessageTool)

	// 添加Redis工具
	redis.AddRedisTools(svr)
	return svr, nil
}
